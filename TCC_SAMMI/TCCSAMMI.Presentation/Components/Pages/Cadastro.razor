@page "/Cadastro"

@using System.Text.RegularExpressions
@using Newtonsoft.Json

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&display=swap" rel="stylesheet">

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12" style="margin-top: -40px;">
        <RadzenLabel Text="Bem-Vindo(a) ao Sammi Games!" Style="font-family: 'Lilita One', sans-serif; font-size: 36px; margin-bottom: 30px; text-align: center; width: 100%;"/>
        <RadzenFormField Text="Usuário" Variant="@variant" Style="font-family: 'Ubuntu', sans-serif;">
            <ChildContent>
                <RadzenTextBox @bind-Value="@user"/>
            </ChildContent>
            <End>
                <RadzenIcon Icon="account_circle" />
            </End>
        </RadzenFormField>
        <RadzenFormField Text="E-mail" Variant="@variant" Style="font-family: 'Ubuntu', sans-serif;">
            <ChildContent>
                <RadzenTextBox @bind-Value="@email" />
            </ChildContent>
            <End>
                <RadzenIcon Icon="mail" />
            </End>
        </RadzenFormField>
        <RadzenFormField Text="Senha" Variant="@variant" Style="font-family: 'Ubuntu', sans-serif;">
            <ChildContent>
                <RadzenTextBox @bind-Value="@senha" Visible="@(!password)" />
                <RadzenPassword @bind-Value="@senha" Visible="@password" />
            </ChildContent>
            <End>
                <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" Style="color: black;"/>
            </End>
        </RadzenFormField>
        <RadzenFormField Text="Confirmar Senha" Variant="@variant" Style="font-family: 'Ubuntu', sans-serif;">
            <ChildContent>
                <RadzenTextBox @bind-Value="@confsenha" Visible="@(!password)" />
                <RadzenPassword @bind-Value="@confsenha" Visible="@password" />
            </ChildContent>
            <End>
                <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" Style="color: black;"/>
            </End>
        </RadzenFormField>
    </RadzenStack>
    
    @if (showalert)
    {
        <RadzenAlert AlertStyle="@(alerttype)" Variant="Variant.Flat" Shade="Shade.Lighter">
            @alertmsg
        </RadzenAlert>
    }

    <div class="rz-p-12 rz-text-align-center" style="padding: 1rem!important;">
        <RadzenSwitch @bind-Value=@sw Change=@(args => OnChange(args, "Switch")) InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
        <RadzenLabel Text="Receber atualizaçoes por e-mail?" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle; font-family: 'Ubuntu', sans-serif;" />
    </div>

    <div class="rz-p-12 rz-text-align-center" style="padding: 1rem!important;">
        <RadzenButton Variant="Variant.Flat" Click=@(() => cadastra()) Text="Cadastrar" Style="font-family: 'Ubuntu', sans-serif; background-color: #217011" />
    </div>

    <div class="rz-p-12 rz-text-align-center" style="padding: 1rem!important;">
         <a href="/Login">
            <RadzenLabel Text="Já possui uma conta? Faça login!" Style="font-family: 'Ubuntu', sans-serif; cursor: pointer; color: black"/>
        </a>
        </div>
</RadzenCard>

@code {
    AlertStyle alerttype; //Warning, Success, Info, Danger
    Variant variant = Variant.Outlined;

    bool sw;
    bool flag;
    bool password = true;
    bool showalert = false;
    string alertmsg;

    string user = "";
    string email = "";
    string senha = "";
    string confsenha = "";

    public void cadastra()
    {
        // if (this.confsenha != this.senha)
        // {
        //     this.alerttype = AlertStyle.Warning;
        //     this.alertmsg = "As senha devem coincidir!";
        //     this.showalert = !this.showalert;
        // }
        // else if (!Regex.IsMatch(this.email, @"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z", RegexOptions.IgnoreCase))
        // {
        //     this.alerttype = AlertStyle.Warning;
        //     this.alertmsg = "Utilize um email válido!";
        //     this.showalert = !this.showalert;
        // }
        // else //tudo certo, campos validados
        // {
        //     this.alertmsg = "";

        //     Controller con = new Controller();
        //     var list = con.getusers();

        //     //UserRoot novousuario = new UserRoot();
        //     Usuario u = new Usuario();
        //     u.nome = this.user;
        //     u.email = this.email;
        //     u.senha = this.senha;
        //         DateTime dateTime = DateTime.UtcNow.Date;
        //     u.datahora = dateTime.ToString();
        //         UserMatematica math = new UserMatematica();
        //         math.adi = 0;
        //         math.sub = 0;
        //         math.mul = 0;
        //         math.div = 0;
        //     u.matematica = math;
        //         UserPortugues portu = new UserPortugues();
        //         portu.silabas = 0;
        //     u.portugues = portu;
        //     //novousuario.user = u;

        //     list.Add(u);

        //     if (con.cadastrauser(list))
        //     {
        //         alerttype = AlertStyle.Success;
        //         alertmsg = "Cadastro feito com sucesso!";
        //         showalert = !showalert;
        //     }
        //     else
        //     {
        //         alerttype = AlertStyle.Danger;
        //         alertmsg = "Desculpe, tente novamente!";
        //         showalert = !showalert;
        //     }
        // }
    }

    void OnChange(bool a,string txt)
    {
        //nothing
    }

    void TogglePassword()
    {
        password = !password;
    }
}